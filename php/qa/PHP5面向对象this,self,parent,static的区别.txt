PHP5面向对象this,self,parent,static的区别 (2008-05-06 10:12:21)转载▼

PHP5 是一具备了大部分面向对象语言的特性的语言,比PHP4 有了很多的面向对象的特性,但是有部分概念也比较绕人,所以今天拿出来说说,说

的不好,请高手见谅. (阅读本文，需要了解PHP5 的面向对象的知识)

首先我们来明白上面三个关键字: this,self,parent,从字面上比较好理解,是指这,自己,父亲,呵呵,比较好玩了,我们先建立几个概念,这三个

关键字分别是用在什么地方呢?我们初步解释一下,this 是指向当前对象的指针(我们姑且用C 里面的指针来看吧),self 是指向当前类的指针

,parent 是指向父类的指针。我们这里频繁使用指针来描述，是因为没有更好的语言来表达，呵呵，语文没学好。 -_-#

这么说还不能很了解，那我们就根据实际的例子结合来讲讲。

(1)this


———— PHP代码 ————

1 
2
3 class UserName
4 {
5     //定义属性
6      private $name;
7
8     //定义构造函数
9     function __construct( $name )
10    {
11          $this->name = $name; //这里已经使用了this 指针
12     }
13
14     //析构函数
15     function __destruct(){}
16
17     //打印用户名成员函数
18     function printName()
19     {
20         print( $this->name ); //又使用了this 指针
21     }
22 }
23
24 //实例化对象
25 $nameObject = new UserName( "heiyeluren" );
26
27 //执行打印
28 $nameObject->printName(); //输出: heiyeluren
29
30 //第二次实例化对象
31 $nameObject2 = new UserName( "PHP5" );
32
33 //执行打印
34 $nameObject2->printName(); //输出：PHP5
35 ?>


————————————

我们看，上面的类分别在11 行和20 行使用了this 指针，那么当时this 是指向谁呢？其实this 是在实例化的
时候来确定指向谁，比如第一次实例化对象的时候(25 行)，那么当时this 就是指向$nameObject 对象，那么执
行18 行的打印的时候就把print( $this->name )，那么当然就输
出了"heiyeluren"。第二个实例的时候，print( $this->name )变成了print( $nameObject2->name )，
于是就输出了"PHP5"。所以说，this 就是指向当前对象实例的指针，不指向任何其他对象或类。

(2)self

首先我们要明确一点，self 是指向类本身，也就是self 是不指向任何已经实例化的对象，一般self 使用来指向类中的静态变量。


———— PHP代码 ————

1 2
3 class Counter
4 {
5     //定义属性，包括一个静态变量
6      private static $firstCount = 0;
7      private $lastCount;
8
9     //构造函数
10    function __construct()
11    {
12          $this->lastCount = ++self::$firstCount; //使用self 来调用静态变量,
                             //使用self 调用必须使用::(域运算符号)
13    }
14
15     //打印最次数值
16     function printLastCount()
17     {
18         print( $this->lastCount );
19     }
20 }
21
22 //实例化对象
23 $countObject = new Counter();
24
25 $countObject->printLastCount(); //输出 1
26
27 ?>


————————————


我们这里只要注意两个地方，第6 行和第12 行。我们在第二行定义了一个静态变量$firstCount，并且初始值为0，那么在12 行的时候调用了

这个值得，使用的是self 来调用，并且中间使用"::"来连接，就是我们所谓的域运算符，那么这时候我们调用的就是类自己定义的静态变量

$frestCount，我们的静态变量与下面对象的实例无关，它只是跟类有关，那么我调用类本身的的，那么我们就无法使用this 来引用，可以使

用self 来引用，因为self是指向类本身，与任何对象实例无关。换句话说，假如我们的类里面静态的成员，我们也必须使用self

来调用。

(3)parent

我们知道parent 是指向父类的指针，一般我们使用parent 来调用父类的构造函数。

———— PHP代码 ————

1 2
3 //基类
4 class Animal
5 {
6     //基类的属性
7      public $name; //名字
8
9     //基类的构造函数
10      public function __construct( $name )
11     {
12          $this->name = $name;
13     }
14 }
15
16 //派生类
17 class Person extends Animal //Person 类继承了Animal 类
18 {
19      public $personSex; //性别
20      public $personAge; //年龄
21
22     //继承类的构造函数
23    function __construct( $personSex, $personAge )
24     {
25          parent::__construct( "heiyeluren" ); //使用parent 调用了父类的构造函数
26          $this->personSex = $personSex;
27          $this->personAge = $personAge;
28     }
29
30     function printPerson()
31     {
32         print( $this->name. " is " .$this->personSex. ",this year" .$this->personAge );
33     }
34 }
35
36 //实例化Person 对象
37 $personObject = new Person( "male", "21");
38
39//执行打印
40 $personObject->printPerson(); //输出：
41
42 ?>


————————————

我们注意这么几个细节：成员属性都是public 的，特别是父类的，是为了供继承类通过this 来访问。我们注意关键的地方，第25 行：

parent::__construct( "heiyeluren" ),这时候我们就使用parent 来调用父类的
构造函数进行对父类的初始化，因为父类的成员都是public 的，于是我们就能够在继承类中直接使用this 来调用。
总结：
this 是指向对象实例的一个指针，self 是对类本身的一个引用，parent 是对父类的引用。
(4) static

static 关键字在类中是，描述一个成员是静态的，static 能够限制外部的访问，因为static 后的成员是属于
类的，是不属于任何对象实例，其他类是无法访问的，只对类的实例共享，能一定程序对该成员尽心保护。类的静
态变量，非常类似全局变量，能够被所有类的实例共享，类的静态方法也是一样的，类似于全局函数。类的静态方
法能访问类的静态的属性。另外说明的是，static 的成员，必须使用self 来访问，使用this 会出错。
另外,还有一个比较重要的特点就是,如果一个方法使用了static,那么这个方法就能够在不需要实例化对象的前
提下直接使用该方法.
(关于this 和self 的异同，请参考：
http://blog.csdn.net/heiyeshuwu/archive/2004/11/03/165828.aspx )

(5)const

const 是一个定义常量的关键字，类似于C 中的#define，能够定义一个常量，如果在程序中改变了它的值，那么
会出现错误。

举例说明上面的代码：(注：以下代码来自phpe.net)


———— PHP代码 ————

class Counter
{
    private static $count = 0;//定义一个静态属性
    const   VERSION       = 2.0;//定义一个常量

     //构造函数
    function __construct()
     {
        self::$count++;
     }

    //析构函数
    function __destruct()
     {
        self::$count--;
     }

    //定义一个静态的方法
    static function getCount()
     {
         return self::$count;
     }
}

//创建一个实例
$c = new Counter();

//执行打印
print( Counter::getCount(). "
n" ); //使用直接输入类名来访问静态方
法Counter::getCount

//打印类的版本
print( "Version useed: " .Counter::VERSION. "
n" );
?>  